// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics/prometheus"
	"github.com/go-kit/kit/tracing/opentracing"
	"github.com/go-kit/kit/transport"
	"github.com/go-kit/kit/transport/grpc"
	"github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	"hello/pkg/endpoint"
	"hello/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initGRPCHandler(endpoints, g)
	return g
}
func defaultGRPCOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]grpc.ServerOption {
	optErrHandler := grpc.ServerErrorHandler(transport.NewLogErrorHandler(logger))
	options := map[string][]grpc.ServerOption{
		"MakeADate":      {optErrHandler, grpc.ServerBefore(opentracing.GRPCToContext(tracer, "MakeADate", logger))},
		"SayHi":          {optErrHandler, grpc.ServerBefore(opentracing.GRPCToContext(tracer, "SayHi", logger))},
		"UpdateUserInfo": {optErrHandler, grpc.ServerBefore(opentracing.GRPCToContext(tracer, "UpdateUserInfo", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["SayHi"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "SayHi")), endpoint.InstrumentingMiddleware(duration.With("method", "SayHi"))}
	mw["MakeADate"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "MakeADate")), endpoint.InstrumentingMiddleware(duration.With("method", "MakeADate"))}
	mw["UpdateUserInfo"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateUserInfo")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateUserInfo"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"SayHi", "MakeADate", "UpdateUserInfo"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
